{
    "manifests": {
        "shopware/fastly-meta": {
            "manifest": {
                "copy-from-recipe": {
                    "config/": "%CONFIG_DIR%/"
                },
                "env": {
                    "FASTLY_API_TOKEN": "EXAMPLE_TOKEN",
                    "FASTLY_SERVICE_ID": "EXAMPLE_SERVICE"
                },
                "post-install-output": [
                    "  * Add your <comment>FASTLY_API_TOKEN</comment> and <comment>FASTLY_SERVICE_ID</comment> into <comment>.env</comment>",
                    "  * Run <comment>vendor/bin/shopware-deployment-helper fastly:snippet:deploy</comment> to deploy the Fastly snippets",
                    "  * The Fastly snippets are now deployed and you can start using the Fastly CDN",
                    "  * The snippets are also updated on regular <comment>vendor/bin/shopware-deployment-helper run</comment> runs"
                ]
            },
            "files": {
                "config/fastly/deliver/default.vcl": {
                    "contents": [
                        "# Remove the exact PHP Version from the response for more security (e.g. 404 pages)",
                        "unset resp.http.x-powered-by;",
                        "",
                        "# We use fastly.ff.visits_this_service to avoid running this logic on shield nodes. We only need to",
                        "# run it on edge nodes",
                        "if (fastly.ff.visits_this_service == 0 && resp.http.sw-invalidation-states) {",
                        "  # invalidation headers are only for internal use",
                        "  unset resp.http.sw-invalidation-states;",
                        "",
                        "  ## we don't want the client to cache",
                        "  set resp.http.Cache-Control = \"no-cache, private\";",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "config/fastly/fetch/default.vcl": {
                    "contents": [
                        "# Pass immediately if x-pass is present",
                        "if (req.http.x-pass) {",
                        "  return (pass);",
                        "}",
                        "",
                        "# remove set cookie headers to make responses cachable",
                        "if (beresp.http.cache-control ~ \"public\") {",
                        "  unset beresp.http.set-cookie;",
                        "}",
                        "",
                        "if (beresp.http.Cache-Control ~ \"private|no-cache|no-store\") {",
                        "  set req.http.Fastly-Cachetype = \"PRIVATE\";",
                        "  return (pass);",
                        "}",
                        "",
                        "# If the object is coming with no Expires, Surrogate-Control or Cache-Control headers we assume it's a misconfiguration",
                        "# and should not cache it. This is to prevent inadventently caching private data",
                        "if (!beresp.http.Expires && !beresp.http.Surrogate-Control ~ \"max-age\" && !beresp.http.Cache-Control ~ \"(s-maxage|max-age)\") {",
                        "  # Varnish sets default TTL if none of the headers above are present. If not set we want to make sure we don't cache it",
                        "        set beresp.ttl = 3600s;",
                        "        return(pass);",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "config/fastly/hash/default.vcl": {
                    "contents": [
                        "# Consider Shopware http cache cookies",
                        "if (req.http.cookie:sw-cache-hash) {",
                        "  set req.hash += req.http.cookie:sw-cache-hash;",
                        "} elseif (req.http.cookie:sw-currency) {",
                        "  set req.hash += req.http.cookie:sw-currency;",
                        "}"
                    ],
                    "executable": false
                },
                "config/fastly/hit/default.vcl": {
                    "contents": [
                        "if (req.http.cookie:sw-states) {",
                        "   set req.http.states = req.http.cookie:sw-states;",
                        "",
                        "   if (req.http.states ~ \"logged-in\" && obj.http.sw-invalidation-states ~ \"logged-in\" ) {",
                        "      return (pass);",
                        "   }",
                        "",
                        "   if (req.http.states ~ \"cart-filled\" && obj.http.sw-invalidation-states ~ \"cart-filled\" ) {",
                        "      return (pass);",
                        "   }",
                        "}"
                    ],
                    "executable": false
                },
                "config/fastly/recv/default.vcl": {
                    "contents": [
                        "# Don't allow clients to force a pass",
                        "if (req.restarts == 0) {",
                        "  unset req.http.x-pass;",
                        "}",
                        "",
                        "# Enable Fastly authentification for single purges",
                        "set req.http.Fastly-Purge-Requires-Auth = \"1\";",
                        "",
                        "# Mitigate httpoxy application vulnerability, see: https://httpoxy.org/",
                        "unset req.http.Proxy;",
                        "",
                        "# Strip query strings only needed by browser javascript. Customize to used tags.",
                        "if (req.url != req.url.path) {",
                        "  set req.url = querystring.filter(req.url,",
                        "    \"pk_campaign\" + querystring.filtersep() +",
                        "    \"piwik_campaign\" + querystring.filtersep() +",
                        "    \"pk_kwd\" + querystring.filtersep() +",
                        "    \"piwik_kwd\" + querystring.filtersep() +",
                        "    \"pk_keyword\" + querystring.filtersep() +",
                        "    \"pixelId\" + querystring.filtersep() +",
                        "    \"kwid\" + querystring.filtersep() +",
                        "    \"kw\" + querystring.filtersep() +",
                        "    \"adid\" + querystring.filtersep() +",
                        "    \"chl\" + querystring.filtersep() +",
                        "    \"dv\" + querystring.filtersep() +",
                        "    \"nk\" + querystring.filtersep() +",
                        "    \"pa\" + querystring.filtersep() +",
                        "    \"camid\" + querystring.filtersep() +",
                        "    \"adgid\" + querystring.filtersep() +",
                        "    \"cx\" + querystring.filtersep() +",
                        "    \"ie\" + querystring.filtersep() +",
                        "    \"cof\" + querystring.filtersep() +",
                        "    \"siteurl\" + querystring.filtersep() +",
                        "    \"utm_source\" + querystring.filtersep() +",
                        "    \"utm_medium\" + querystring.filtersep() +",
                        "    \"utm_campaign\" + querystring.filtersep() +",
                        "    \"_ga\" + querystring.filtersep() +",
                        "    \"gclid\"",
                        "    );",
                        "}",
                        "",
                        "# Normalize query arguments",
                        "set req.url = querystring.sort(req.url);",
                        "",
                        "# Make sure that the client ip is forward to the client.",
                        "if (req.http.x-forwarded-for) {",
                        "    set req.http.X-Forwarded-For = req.http.X-Forwarded-For + \", \" + req.http.Fastly-Client-IP;",
                        "} else {",
                        "    set req.http.X-Forwarded-For = req.http.Fastly-Client-IP;",
                        "}",
                        "",
                        "# Don't cache Authenticate & Authorization",
                        "if (req.http.Authenticate || req.http.Authorization) {",
                        "    set req.http.x-pass = \"1\";",
                        "}",
                        "",
                        "# Always pass these paths directly to php without caching",
                        "# Note: virtual URLs might bypass this rule (e.g. /en/checkout)",
                        "if (req.url.path ~ \"^/(checkout|account|admin|api|csrf)(/.*)?$\") {",
                        "    set req.http.x-pass = \"1\";",
                        "}",
                        "",
                        "# Excludes requests from caching which contain the \"affiliateCode\" query parameter.",
                        "# Otherwise requests which are already cached but now",
                        "# contain the \"affiliateCode\" query parameter are loaded from cache.",
                        "# AffiliateTrackingListener::checkAffiliateTracking() would not be called",
                        "# and the affiliate code is not stored properly in the session.",
                        "if (std.strlen(querystring.get(req.url, \"affiliateCode\")) > 0) {",
                        "    set req.http.x-pass = \"1\";",
                        "}",
                        "",
                        "# Disable stale_while_revalidate feature on SHIELD node to avoid caching issue when both soft-purges and shieding are used.",
                        "if (fastly.ff.visits_this_service > 0) {",
                        "  set req.max_stale_while_revalidate = 0s;",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "config/packages/prod/fastly.yaml": {
                    "contents": [
                        "# yaml-language-server: $schema=https://raw.githubusercontent.com/shopware/shopware/trunk/config-schema.json",
                        "",
                        "shopware:",
                        "    http_cache:",
                        "        # Uncomment all to enable soft purge",
                        "        # Allow to serve the out-dated cache for 300 seconds",
                        "        # stale_while_revalidate: 300",
                        "        # Allow to serve the out-dated cache for an hour if the origin server is offline",
                        "        # stale_if_error: 3600",
                        "        reverse_proxy:",
                        "            enabled: true",
                        "            fastly:",
                        "                enabled: true",
                        "                api_key: '%env(FASTLY_API_TOKEN)%'",
                        "                service_id: '%env(FASTLY_SERVICE_ID)%'",
                        "                soft_purge: '1'",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "344d5624dd9671ef4f5f4218d9262397e47b7d46"
        }
    }
}
